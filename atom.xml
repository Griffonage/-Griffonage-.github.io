<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜雨灯</title>
  
  <subtitle>越贴近真实,真实越荒诞</subtitle>
  <link href="https://ajungle.cn/atom.xml" rel="self"/>
  
  <link href="https://ajungle.cn/"/>
  <updated>2022-12-22T13:42:46.857Z</updated>
  <id>https://ajungle.cn/</id>
  
  <author>
    <name>Aug Jungle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文章总目录</title>
    <link href="https://ajungle.cn/post/ef59632d.html"/>
    <id>https://ajungle.cn/post/ef59632d.html</id>
    <published>2022-12-03T12:28:00.000Z</published>
    <updated>2022-12-22T13:42:46.857Z</updated>
    
    <content type="html"><![CDATA[<p>生活记录</p><ul><li><a href="/post/ca641055.html">记一次成都学车经历</a> ┃ <a href="/post/bf4ee09f.html">杂谈</a> ┃ <a href="/post/ff094b6e.html">中秋放个我喜欢的歌曲</a></li></ul><p>计算机技术</p><ul><li>设计思想：<a href="/post/a151c9f2.html">设计原则-翻译</a> ┃ <a href="/post/907a70d0.html">设计模式之代理模式</a></li><li>数据库：<a href="/post/23ffdd3c.html">MySQL从MVCC到ReadView</a> ┃ <a href="/post/5c684e4d.html">MySQL排序后分页错乱问题分析</a></li><li>Java：<a href="/post/9a372c09.html">JDK之List转Map实现解析</a>┃ <a href="/post/a4854be7.html">JDK动态代理实现Redis降级</a></li><li>书籍学习：<a href="/post/e1b9f839.html">《Effective Java》-学习笔记</a> ┃ <a href="/post/ba23f4e8.html">《设计模式之美》-学习笔记</a></li><li>小技巧：<a href="/post/901f844.html">国内访问Github提速教程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;生活记录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/post/ca641055.html&quot;&gt;记一次成都学车经历&lt;/a&gt; ┃ &lt;a href=&quot;/post/bf4ee09f.html&quot;&gt;杂谈&lt;/a&gt; ┃ &lt;a href=&quot;/post/ff094b6e.html&quot;&gt;中秋放个</summary>
      
    
    
    
    <category term="目录" scheme="https://ajungle.cn/categories/%E7%9B%AE%E5%BD%95/"/>
    
    
    <category term="目录" scheme="https://ajungle.cn/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>杂谈</title>
    <link href="https://ajungle.cn/post/bf4ee09f.html"/>
    <id>https://ajungle.cn/post/bf4ee09f.html</id>
    <published>2022-10-06T14:49:00.000Z</published>
    <updated>2022-12-22T14:46:57.488Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在很多时候，自己都有一种强烈的冲动，一种将当时心境记录下来的冲动，然而每到动手之际，却是难以憋出多少文字。</p><p>鉴于此情况，单独开一篇文章，用以记录平时生活感悟。</p><p>记录自己的琐屑，记录自己的平凡。</p><p><img src="https://file.ajungle.cn/img/sohucs.jpg" height="300px" width="100%"></img></p><h2 id="2022-12-22-周四深夜"><a href="#2022-12-22-周四深夜" class="headerlink" title="2022-12-22:周四深夜"></a>2022-12-22:周四深夜</h2><p>最近的事情，可能就是我中招了吧，周围的同事，以及朋友，都中招了。</p><p>前两天发烧，特别难受，感觉是二十多年来最痛苦的两天（发烧、呕吐、头疼）</p><p>熬过两天后，症状主要就是咳嗽，也是比较严重，毕竟我一个不抽烟的人，基本没怎么咳嗽，但是中了后，会咳痰出来，感觉也是后遗症吧。</p><p>在家里居家办公了一个星期后，就上班了，上班的同事都在咳嗽，感觉大家都没有好，但是为了生活，还是有很多人来上班了。</p><p>感觉自己现在这个时间呀，可能刚好就是给上一代炒房的人接盘，上一代透支了我们这一代至少50年的潜力，鹅城的税，都收到100年后了。</p><h2 id="2022-11-30-周三"><a href="#2022-11-30-周三" class="headerlink" title="2022-11-30:周三"></a>2022-11-30:周三</h2><p>下午下班打了个车，想做个每天都必须去做的事（原谅我不敢打出来，因为身体上的石头太重），排队的人实在是太多了。</p><p>我觉得实在是奇观，也觉得很荒唐。</p><p>更觉得可悲。</p><p>为别人可悲，也为自己可悲，为过去可悲，也为将来可悲。</p><p>所有人用着几乎相同的应用，接收着相同的讯息，犹如工厂的模具造出的产品，几乎一模一样。</p><p>一个泥潭，所有人都在里面，互相抓着、挣扎。</p><p>我当老师时，对学生总是十分宽容，我知道自己并不是一个合格的老师，因为每当我想要发火时，总会想起曾经的自己，那个犯错的，仿佛就是曾经的自己，而我，除了风轻云淡的报以微笑，又该释以何种严厉。</p><h2 id="2022-10-16-周末"><a href="#2022-10-16-周末" class="headerlink" title="2022-10-16:周末"></a>2022-10-16:周末</h2><p>周六去自习室做了<code>Rust</code>的<code>复合类型</code>、<code>流程控制</code>题。</p><p>周天，天朗气清、惠风和畅，出门玩耍</p><h2 id="2022-10-07-国庆第七天"><a href="#2022-10-07-国庆第七天" class="headerlink" title="2022-10-07:国庆第七天"></a>2022-10-07:国庆第七天</h2><p>明天上班，今天又去了<code>知了布知自习室</code>。</p><p>上午做了<strong>所有权和借用</strong>、<strong>复合类型下字符串与切片</strong>的习题，速度明显变慢</p><p>下午仔细的看了<strong>泛型和特征</strong>，有点难，因为要上班了，给后面的<strong>集合类型、类型转换、返回值和错误处理、包和模块、注释和文档、格式化输出</strong>都粗略的看了一下。</p><p>经过这几天的学习，我觉得，Rust真是一门优秀的语言，通过一系列复杂的规则，规避与解决了开发过程中经常碰到的问题。</p><p>但是，学习这些规则与思路，开始真是比较不容易…即使我具备一定的开发及经验。</p><p>后面怎么办呢？</p><p>英语，这个不能停止学习，工作和出国都需要（优先级1）</p><p>编程</p><ul><li>算法与数据结构，继续刷牛客网（优先级1）</li><li>Java，暂时靠这吃饭，再出一篇设计模式的博客吧（优先级1）</li><li>Rust，我来青春赌未来，相信区块链分布式是大趋势大潮流（优先级2）</li><li>MySQL闲无事时，继续看视频学习（优先级2）</li></ul><h2 id="2022-10-06-国庆第六天"><a href="#2022-10-06-国庆第六天" class="headerlink" title="2022-10-06:国庆第六天"></a>2022-10-06:国庆第六天</h2><p>今天是国庆假期的倒数第二天。</p><ol><li>国庆第一天：睡觉、打王者、做核酸、骑单车到动物园</li><li>国庆第二天：去了<code>碳酸自习室</code>，地方倒是挺大，分为上下两层，人较少（PS：做了啥？？？<strong>翻译、学习设计原则</strong>）</li><li>国庆第三天：去了<code>碳酸自习室</code>，冲了几天会员（PS：做了啥？？？<strong>翻译、学习设计原则</strong>）</li><li>国庆第四天：睡觉、打王者</li><li>国庆第五天：因为核酸到期（需要72小时内阴性）不能做地铁，所以在家附近找了家<code>知了布知自习室</code>，本来以为自己不会喜欢这种小自习室，没想到旁边有个好看的小姐姐，呃呃呃呃呃。。。还不错，再冲个几天会员-.-（PS：做了啥？？？<strong>配置Rust开发环境、学习Rust变量绑定与结构、基本类型</strong>）</li><li>国庆第五天：继续去<code>知了布知自习室</code>，下午垃圾桶满了，有强烈的酸味，看到里面的人都能忍，我也就忍了-.-（PS：做了啥？？？<strong>做Rust练习题、学习Rust的所有权和借用、复合类型、流程控制、模式匹配、方法Method</strong>）</li></ol><p>明天也去自习室吧，想转<strong>区块链工程师</strong>，不知道将来有没有机会</p><p>设计原则里面有一个<code>Curly&#39;s Law</code>，是从电影里面得来的，虽然没看过，但是感觉还是很有意境，以下是对话</p><blockquote><p>Curly: Do you know what the secret of life is?</p><p>Curly: This.  [holds up one finger]</p><p>Mitch: Your finger?</p><p>Curly: One thing. Just one thing. You stick to that and the rest don’t mean shit.</p><p>Mitch: But what is the “one thing?”</p><p>Curly: [smiles] That’s what <em>you</em> have to find out.</p></blockquote>]]></content>
    
    
    <summary type="html">一些琐碎</summary>
    
    
    
    <category term="日记" scheme="https://ajungle.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://ajungle.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计原则</title>
    <link href="https://ajungle.cn/post/a151c9f2.html"/>
    <id>https://ajungle.cn/post/a151c9f2.html</id>
    <published>2022-09-22T10:42:05.000Z</published>
    <updated>2022-10-02T08:34:25.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>设计原则只是供开发人员参考的，并不是一定要遵守的规则，但需要了解并尽可能的去满足设计原则。</p><h2 id="KISS"><a href="#KISS" class="headerlink" title="KISS"></a>KISS</h2><blockquote><p>Keep It Simple Stupid（保持简单直白）</p></blockquote><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><ul><li>更少的代码节省更多的时间，减少更多的Bug，以及更容易修改</li><li>简单是复杂的更高水平</li><li>完美并不是没有东西可以被添加进来，而是没有东西可以被带走</li></ul><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>不要使用大部分人难以理解的代码，让其晦涩难懂</li><li>不要过度优化，不是封装的越多越深越好，也不是底层函数或者高级语法用的越多越好</li></ul><h2 id="YAGNI"><a href="#YAGNI" class="headerlink" title="YAGNI"></a>YAGNI</h2><blockquote><p>you aren’t gonna need it（你不会需要它-不要实现非必要的东西）</p></blockquote><h3 id="为什么-1"><a href="#为什么-1" class="headerlink" title="为什么"></a>为什么</h3><ul><li>你的时间非常宝贵，任何为将来可能需要的功能做的工作，不但会导致你从当前必须实现的功能分心，而且还浪费了阅读者的时间</li><li>这将导致代码臃肿、软件变得庞大且复杂</li></ul><h3 id="怎么做-1"><a href="#怎么做-1" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>在日常开发中，需要尽可能评估好设计的复杂度，不要过度设计。发现自己设计有不足的地方，，要有<code>持续重构</code>的精神，不断完善自己的设计，不要等到事情累计到不得不重构的时候，那时可能影响范围已经很大，事情往往已经到了积重难返的阶段</li></ul><h3 id="KISS和YAGNI的异同"><a href="#KISS和YAGNI的异同" class="headerlink" title="KISS和YAGNI的异同"></a>KISS和YAGNI的异同</h3><p>KISS和YAGNI都是在阐述<code>简单</code>这个事情，只是看待的角度不同，KISS是从<code>如何做</code>(保持简单)的角度，YAGNI是从<code>要不要做</code>(不要过度设计)的角度</p><h2 id="DTSTTCPW"><a href="#DTSTTCPW" class="headerlink" title="DTSTTCPW"></a>DTSTTCPW</h2><blockquote><p>Do The Simplest Thing That Could Possibly Work（做最简单的事情，如果它可能工作）</p></blockquote><h3 id="为什么-2"><a href="#为什么-2" class="headerlink" title="为什么"></a>为什么</h3><ul><li>如果我们致力于解决真正的问题，就能最大限度地解决真正的问题</li><li>专业程序员就是能写出白痴程序员都能读懂的代码，白痴程序员就是写出即使专业程序员都无法读懂的代码</li></ul><h3 id="怎么做-2"><a href="#怎么做-2" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>询问自己：完成这件事最简单的方式是什么</li></ul><h2 id="Separation-of-Concerns"><a href="#Separation-of-Concerns" class="headerlink" title="Separation of Concerns"></a>Separation of Concerns</h2><blockquote><p>关注点分离是将计算机程序分离成不同部分的设计原则，这样每个部分都单独处理自己的关注点。例如，业务逻辑与非业务逻辑是不同的关注点，更改业务逻辑不应该影响到非业务逻辑</p></blockquote><h3 id="为什么-3"><a href="#为什么-3" class="headerlink" title="为什么"></a>为什么</h3><ul><li>简化软件的开发和维护</li><li>当每个关注点分离足够好时，代码的可复用性更高且开发及迭代更加具备独立性</li></ul><h3 id="怎么做-3"><a href="#怎么做-3" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>将程序尽可能分离成各自独立的单一模块中</li></ul><h2 id="DRY"><a href="#DRY" class="headerlink" title="DRY"></a>DRY</h2><blockquote><p>Dont’t Repeat Yourself（不要写重复的代码）</p><p>系统中的每一个部分都应该单一、清晰、且具备权威性。项目中每一个重要的功能应该仅在一份源代码中，如果相似的功能出现在两个不同的地方，通过抽象出不同部分将其结合起来往往是有益的</p></blockquote><h3 id="为什么-4"><a href="#为什么-4" class="headerlink" title="为什么"></a>为什么</h3><ul><li>重复可能导致维护困难、因果颠倒、逻辑互斥</li><li>修改系统中任何一个单一的部分，不会改变到其他没有关联的地方</li><li>逻辑上相关联的部分修改时，可以保持可预测及同步性</li></ul><h3 id="怎么做-4"><a href="#怎么做-4" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>将业务规则、长的表达式、if语句、数学公式、元数据等等，放在一个地方</li><li>在代码中使用单一、明确的来源</li><li>当相似功能的代码出现在不同位置3次时，就应该重构这段代码（为什么不是两次，因为过早的重构可能会导致错误的抽象，而3次时，维护的成本已经超过了重构的成本，以及可能潜在的糟糕设计）</li></ul><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>我最怕那些copy别人一大段代码的！！！简直噩梦！！！关键我还碰到了！！！苍天呐！！！</p><h2 id="Code-For-The-Maintainer"><a href="#Code-For-The-Maintainer" class="headerlink" title="Code For The Maintainer"></a>Code For The Maintainer</h2><blockquote><p>为维护者而编写</p></blockquote><h3 id="为什么-5"><a href="#为什么-5" class="headerlink" title="为什么"></a>为什么</h3><ul><li>目前为止，维护是任何一个项目最昂贵的阶段</li></ul><h3 id="怎么做-5"><a href="#怎么做-5" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>做一个维护者</li><li>编写代码时，要将维护你代码的人，当成知道你居住地址且有暴力倾向的精神病患者</li><li>编写代码和注释时，要关照级别较低的人，让他们也能够愉快的阅读并能从中学习</li><li>不要让他人思考</li><li>遵循最小惊讶原则（设计应该按照大多人期望的形式运行，而不是让其感到惊讶或者诧异）</li></ul><h2 id="Avoid-Premature-Optimization"><a href="#Avoid-Premature-Optimization" class="headerlink" title="Avoid Premature Optimization"></a>Avoid Premature Optimization</h2><blockquote><p>避免过早优化（理解过早和非过早至关重要）</p></blockquote><h3 id="为什么-6"><a href="#为什么-6" class="headerlink" title="为什么"></a>为什么</h3><ul><li>目前还不清楚瓶颈在哪里</li><li>优化后，可能变得更加难以阅读及维护</li></ul><h3 id="怎么做-6"><a href="#怎么做-6" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>让它更加正确、更加快速</li><li>不要在不需要时优化，而是在分析及发现瓶颈后再优化</li></ul><h2 id="Minimise-Coupling"><a href="#Minimise-Coupling" class="headerlink" title="Minimise Coupling"></a>Minimise Coupling</h2><blockquote><p>最小化耦合（耦合是模块&#x2F;组件间项目依赖的程度）</p></blockquote><h3 id="为什么-7"><a href="#为什么-7" class="headerlink" title="为什么"></a>为什么</h3><ul><li><p>一个模块的改变经常会对其他模块造成影响</p></li><li><p>由于模块间的相互依赖，使用及组装可能花费更多的时间</p></li><li><p>模块间相互依赖程度高容易导致复用性及可测试降低</p></li></ul><h3 id="怎么做-7"><a href="#怎么做-7" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>消除或者减少不必要的联系</li><li>通过隐藏实现细节来减少耦合</li><li>遵循<code>迪米特法则</code></li></ul><h2 id="Law-of-Demeter"><a href="#Law-of-Demeter" class="headerlink" title="Law of Demeter"></a>Law of Demeter</h2><blockquote><p>迪米特法则（不要和陌生人说话。如果两个类无需直接通信，那么就不应该发生直接的相互调用，而应该通过第三方转发调用）</p></blockquote><h3 id="为什么-8"><a href="#为什么-8" class="headerlink" title="为什么"></a>为什么</h3><ul><li>直接通常导致增强耦合</li><li>直接通常显示了过多的实现细节</li></ul><h3 id="怎么做-8"><a href="#怎么做-8" class="headerlink" title="怎么做"></a>怎么做</h3><p>一个对象的方法只能通过一下方式调用：</p><ul><li>对象本身</li><li>方法中的一个参数</li><li>方法中被创建的对象</li><li>对象中的直接属性或字段</li></ul><h2 id="Composition-Over-Inheritance"><a href="#Composition-Over-Inheritance" class="headerlink" title="Composition Over Inheritance"></a>Composition Over Inheritance</h2><blockquote><p>组合优于继承</p></blockquote><h3 id="为什么-9"><a href="#为什么-9" class="headerlink" title="为什么"></a>为什么</h3><ul><li>类之间的耦合更低</li><li>继承打破封装</li></ul><h3 id="怎么做-9"><a href="#怎么做-9" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>继承前考虑父类是否有缺陷，而你是否愿意将缺陷传播到你的类中</li><li>[has a]或者[use a]的类关系用组合；[is a]的情况，才能使用继承</li></ul><h2 id="Orthogonality"><a href="#Orthogonality" class="headerlink" title="Orthogonality"></a>Orthogonality</h2><blockquote><p>正交性，系统中概念上不相干的事情不应该联系在一起</p></blockquote><h3 id="为什么-10"><a href="#为什么-10" class="headerlink" title="为什么"></a>为什么</h3><ul><li>设计越正交，异常越少，使得学习、阅读、编写代码更加容易</li></ul><h2 id="Robustness-Principle"><a href="#Robustness-Principle" class="headerlink" title="Robustness Principle"></a>Robustness Principle</h2><blockquote><p>伯斯塔尔定律，对你想要做的要求严格，对你从其他人那里接收的保持宽松</p></blockquote><h3 id="为什么-11"><a href="#为什么-11" class="headerlink" title="为什么"></a>为什么</h3><p>为了在服务迭代过程中，提供者能够做出新的需求，同时对现有客户造成最小的影响</p><h3 id="怎么做-10"><a href="#怎么做-10" class="headerlink" title="怎么做"></a>怎么做</h3><p>发送给其他机器的代码或者是命令，应该确保完全符合规范。但是接收的输入应该接受不符合规范的，只要含义清楚。</p><h2 id="Inversion-of-Control"><a href="#Inversion-of-Control" class="headerlink" title="Inversion of Control"></a>Inversion of Control</h2><blockquote><p>控制反转原则，也叫好莱坞原则（不要打电话给我，我们会打电话给你），使可重用的代码和解决具体问题的代码，即使他们在一个应用里</p></blockquote><h3 id="为什么-12"><a href="#为什么-12" class="headerlink" title="为什么"></a>为什么</h3><ul><li>控制反转被用来增加程序的模块化以及可扩展性</li><li>将任务的执行与实现解耦</li><li>将模块专注于他们所涉及的任务</li><li>防止模块被替换带来的副作用</li></ul><h3 id="怎么做-11"><a href="#怎么做-11" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>使用工厂模式</li><li>使用服务定位模式</li><li>使用依赖注入</li><li>使用上下文查找</li><li>使用模板方法模式</li><li>使用策略模式</li></ul><h2 id="Maximise-Cohesion？"><a href="#Maximise-Cohesion？" class="headerlink" title="Maximise Cohesion？"></a>Maximise Cohesion？</h2><blockquote><p>最大化内聚，</p></blockquote><h2 id="Liskov-Substitution-Principle"><a href="#Liskov-Substitution-Principle" class="headerlink" title="Liskov Substitution Principle"></a>Liskov Substitution Principle</h2><blockquote><p>里氏替换原则，程序中的对象可以被其子类替换，而不改变程序的正确性</p></blockquote><h2 id="Open-x2F-Closed-Principle"><a href="#Open-x2F-Closed-Principle" class="headerlink" title="Open&#x2F;Closed Principle"></a>Open&#x2F;Closed Principle</h2><blockquote><p>开闭原则，软件实体应该对扩展开放，对修改关闭</p></blockquote><h3 id="为什么-13"><a href="#为什么-13" class="headerlink" title="为什么"></a>为什么</h3><ul><li>通过对现有代码最小化的改动来改善代码的可维护性和稳定性</li></ul><h3 id="怎么做-12"><a href="#怎么做-12" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li><p>编写可以扩展的类（而不是可以修改的类）</p></li><li><p>仅暴露可移动可修改的部分，隐藏其他部分</p></li></ul><h2 id="Single-Responsibility-Principle"><a href="#Single-Responsibility-Principle" class="headerlink" title="Single Responsibility Principle"></a>Single Responsibility Principle</h2><blockquote><p>单一责任原则，一个类不应该有超过一个需要改变的理由</p></blockquote><h3 id="为什么-14"><a href="#为什么-14" class="headerlink" title="为什么"></a>为什么</h3><ul><li>可维护性：改变应该仅在一个模块或者类中进行</li></ul><h3 id="怎么做-13"><a href="#怎么做-13" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>参考Curly’s Law</li></ul><h3 id="Hide-Implementation-Details"><a href="#Hide-Implementation-Details" class="headerlink" title="Hide Implementation Details"></a>Hide Implementation Details</h3><blockquote><p>隐藏实现细节，一个软件模块通过提供一个接口来隐藏信息，同时不泄露任何不必要的信息</p></blockquote><h3 id="为什么-15"><a href="#为什么-15" class="headerlink" title="为什么"></a>为什么</h3><ul><li>当一个实现改变，使用接口的客户端不用进行更改</li></ul><h3 id="怎么做-14"><a href="#怎么做-14" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>最小化类和变量的可访问性</li><li>不要将变量数据设置为public</li><li>避免放置私有的实现细节放到类的接口上</li><li>减少耦合以隐藏更多的实现细节</li></ul><h2 id="Curly’s-Law"><a href="#Curly’s-Law" class="headerlink" title="Curly’s Law"></a>Curly’s Law</h2><blockquote><p>科里定律，为任何特定代码选择一件单一、明确的目标，做一件事情</p></blockquote><h2 id="Encapsulate-What-Changes"><a href="#Encapsulate-What-Changes" class="headerlink" title="Encapsulate What Changes"></a>Encapsulate What Changes</h2><blockquote><p>封装经常修改的代码</p></blockquote><h3 id="为什么-16"><a href="#为什么-16" class="headerlink" title="为什么"></a>为什么</h3><ul><li>当改变发生时，减少需要修改的地方</li></ul><h3 id="怎么做-15"><a href="#怎么做-15" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>封装API背后不同的概念</li><li>尽可能将不同概念分离到它自己的模块</li></ul><h2 id="Interface-Segregation-Principle"><a href="#Interface-Segregation-Principle" class="headerlink" title="Interface Segregation Principle"></a>Interface Segregation Principle</h2><blockquote><p>接口隔离原则。将臃肿的接口减少为多个更小、更具体的客户端特定接口。接口应该更依赖于调用它的代码，而不是实现它的代码。</p></blockquote><h2 id="Command-Query-Separation"><a href="#Command-Query-Separation" class="headerlink" title="Command Query Separation"></a>Command Query Separation</h2><blockquote><p>命令查询分离，每个方法要么是执行操作的命令，要么是向调用者返回数据的查询，但不能两个同时存在。这样就能使得使用者更加方向的调用。</p></blockquote><h3 id="为什么-17"><a href="#为什么-17" class="headerlink" title="为什么"></a>为什么</h3><ul><li>通过清除的将发放划分为查询和命令，程序员可以在不知道方法实现细节的情况下，更加有信心进行编码</li></ul><h3 id="怎么做-16"><a href="#怎么做-16" class="headerlink" title="怎么做"></a>怎么做</h3><ul><li>将一个方法作为查询或命令实现</li><li>明确方法的名称，通过约定名称的方式告知是查询还是命令</li></ul><h2 id="Murphy’s-Law"><a href="#Murphy’s-Law" class="headerlink" title="Murphy’s Law"></a>Murphy’s Law</h2><blockquote><p>墨菲定律，任何可能出错的都会出错</p></blockquote><h2 id="Brooks’s-Law"><a href="#Brooks’s-Law" class="headerlink" title="Brooks’s Law"></a>Brooks’s Law</h2><blockquote><p> 布鲁克斯法则，向已经延误的项目添加人力，只会使其更晚</p></blockquote><h2 id="Linus’s-Law"><a href="#Linus’s-Law" class="headerlink" title="Linus’s Law"></a>Linus’s Law</h2><blockquote><p>林纳斯定律，给予足够的眼睛关注，所有的bug都会显现，代码检视很重要</p></blockquote>]]></content>
    
    
    <summary type="html">可以不遵守，但不能不知道的设计原则</summary>
    
    
    
    <category term="编程" scheme="https://ajungle.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="设计原则" scheme="https://ajungle.cn/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>中秋放个我喜欢的歌曲</title>
    <link href="https://ajungle.cn/post/ff094b6e.html"/>
    <id>https://ajungle.cn/post/ff094b6e.html</id>
    <published>2022-09-10T13:54:05.000Z</published>
    <updated>2022-10-06T14:04:57.098Z</updated>
    
    <content type="html"><![CDATA[<video src="https://file.ajungle.cn/video/CanonRock.mp4" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video>]]></content>
    
    
      
      
    <summary type="html">&lt;video src=&quot;https://file.ajungle.cn/video/CanonRock.mp4&quot; preload=&quot;metadata&quot; controlslist=&quot;nodownload&quot; controls playsinline poster=&quot;&quot;&gt;&lt;/video</summary>
      
    
    
    
    <category term="视频" scheme="https://ajungle.cn/categories/%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="视频" scheme="https://ajungle.cn/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>国内访问Github提速教程</title>
    <link href="https://ajungle.cn/post/901f844.html"/>
    <id>https://ajungle.cn/post/901f844.html</id>
    <published>2022-08-14T05:22:10.000Z</published>
    <updated>2022-12-03T12:58:44.727Z</updated>
    
    <content type="html"><![CDATA[<p>在国内访问Github时会出现速度太慢问题,Picgo上传到Github图床也会出现无法预览情况</p><p>可以通过修改host,达到加速的效果</p><p>访问:<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a></p><p>分别查询</p><ul><li><p><code>github.com</code></p></li><li><p><code>github.global.ssl.fastly.net</code></p></li></ul><p>得到两个域名的IPV4地址,然后修改电脑目录下:<code>C:\Windows\System32\drivers\etc</code>的<code>hosts</code>文件内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">140.82</span><span class="number">.112</span><span class="number">.3</span> github.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.69</span><span class="number">.194</span> github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p>按照上面的格式填好(IP地址替换成自己得到的IPV4地址),再刷新下电脑的host缓存,<code>windows键+R</code>输入<code>cmd</code>,调出命令窗口输入<code>ipconfig /flushdns</code>即可完成</p><p>注意:对于自建图床在Github上的,需要再添加一条<code>raw.githubusercontent.com</code>的解析地址,同上,因为Github对资源的存放位置的不一样</p>]]></content>
    
    
    <summary type="html">提升国内访问Github速度</summary>
    
    
    
    <category term="Github" scheme="https://ajungle.cn/categories/Github/"/>
    
    
    <category term="Github" scheme="https://ajungle.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>MySQL从MVCC到ReadView</title>
    <link href="https://ajungle.cn/post/23ffdd3c.html"/>
    <id>https://ajungle.cn/post/23ffdd3c.html</id>
    <published>2022-07-12T10:17:00.000Z</published>
    <updated>2022-07-25T09:19:33.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从问题出发"><a href="#从问题出发" class="headerlink" title="从问题出发"></a>从问题出发</h2><p>假设有 <strong>student</strong> 表存在，且 <strong>stu_name</strong> 字段的<code>初始值都为 AAAAAA</code></p><blockquote><p>​下表中<code>步骤3 、步骤5查询出的值分别是多少？ </code>将答案写在纸上，本文将解答你的疑惑，了解问题本质</p></blockquote><table><thead><tr><th align="center">序号</th><th align="center">A连接-事务A</th><th align="center">B连接</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">start transaction;</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">update student set stu_name &#x3D; “CCCCCC” where stu_id &#x3D; 1;</td></tr><tr><td align="center">3</td><td align="center">select stu_name from student where stu_id &#x3D; 1;</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">update student set stu_name &#x3D; “CCCCCC” where stu_id &#x3D; 2;</td></tr><tr><td align="center">5</td><td align="center">select stu_name from student where stu_id &#x3D; 2;</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">commit;</td><td align="center"></td></tr></tbody></table><h2 id="先了解事务隔离级别"><a href="#先了解事务隔离级别" class="headerlink" title="先了解事务隔离级别"></a>先了解事务隔离级别</h2><ul><li>Read Uncommitted (读未提交)：事务未提交的数据，对其他事务可见<ul><li>问题：<code>脏读</code>-A事务读到了B事务修改的未提交的数据</li></ul></li><li>Read Committed (读已提交)：事务只能看见已经提交的数据<ul><li>问题：<code>不可重复读</code>-A事务每次查询，都得到最新的已经提交的数据，造成两次查询的结果不一致</li></ul></li><li>Repeatable Read (可重复读)：事务中读取同一行的数据，得到的数据是一致的<ul><li>问题：<code>幻读</code>-A事务如果是范围查询后，B事务又在该范围内插入数据，A事务将会查询到B事务插入的数据</li></ul></li><li>Serializable (可串行化)：强制事务串行化执行，将读取到的每一行加锁，占用资源较大<ul><li>问题：<code>慢</code></li></ul></li></ul><p>注：事务间的隔离性本质上是通过读写锁来实现，不在本文讨论范围内，可以阅读附录推荐了解</p><blockquote><p> InnoDB默认事务隔离级别是<code>REPEATABLE READ (可重复读)</code>,而这种事务的隔离级别会导致<code>幻读</code>， InnoDB采用了<code>MVCC</code>(多版本并发控制)来解决了这个问题。</p></blockquote><h2 id="MVCC-多版本并发控制"><a href="#MVCC-多版本并发控制" class="headerlink" title="MVCC(多版本并发控制)"></a>MVCC(多版本并发控制)</h2><p><code>Multi-Version Concurrency Control</code></p><h3 id="表的隐藏字段"><a href="#表的隐藏字段" class="headerlink" title="表的隐藏字段"></a>表的隐藏字段</h3><p><strong>InnoDB</strong>引擎会为数据库中的每一行添加如下隐藏的列</p><ul><li><code>DB_TRX_ID</code>：行最新更新时，全局事务ID的值，单调递增</li><li><code>DB_ROLL_PTR</code>：回滚指针，undo log回滚时，用来找寻回滚版本的指针</li><li><code>DB_ROW_ID</code>：行唯一ID，在表有主键时不出现在任何索引中</li></ul><h3 id="binlog、redolog与undolog"><a href="#binlog、redolog与undolog" class="headerlink" title="binlog、redolog与undolog"></a>binlog、redolog与undolog</h3><p><strong><code>binlog</code><strong>：记录MySQL的数据变动语句，MySQL服务层实现，</strong>根据设置参数刷新进磁盘中</strong>，以二进制文件存储，一般用于<code>主从复制</code>、<code>数据恢复</code></p><p><strong><code>redolog</code><strong>：</strong>Innodb特有</strong>，提高性能</p><ul><li><p>redo log buffer：内存容量，事务提交可以直接存放在内存中，<strong>根据设置参数刷新进磁盘中</strong></p></li><li><p>redo log file：磁盘上的日志文件，MySQL异常重启后，根据此文件将未提交的事务数据进行重做</p></li></ul><p>注：不论是binlog或redolog都有日志丢失的风险，生产注意将sync_binlog、innodb_flush_log_at_trx_commit两个参数的设置，都设置为1可以分别防止日志丢失</p><p><strong><code>undolog</code><strong>：</strong>Innodb实现MVCC的方式</strong>，控制数据的可见性</p><p>来看看更新语句的undolog记录，假设stu_id&#x3D;1时，stu_name的 初始值为aaaaaa</p><table><thead><tr><th align="center">序号</th><th align="center">语句</th></tr></thead><tbody><tr><td align="center">开启事务</td><td align="center">start transaction;</td></tr><tr><td align="center">第一步</td><td align="center">update student set stu_name &#x3D; “bbbbbb” where stu_id &#x3D; 1;</td></tr><tr><td align="center">第二步</td><td align="center">update student set stu_name &#x3D; “cccccc” where stu_id &#x3D; 1;</td></tr><tr><td align="center">第三步</td><td align="center">update student set stu_name &#x3D; “dddddd” where stu_id &#x3D; 1;</td></tr><tr><td align="center">提交事务</td><td align="center">commit;</td></tr></tbody></table><p>undo log 如下图所示：</p><p><img src="https://file.ajungle.cn/img/20220718215350.png"></p><p>可以看到，每一个<code>DB_ROLL_PTR</code>的值，都是上一个行版本<code>DB_TRX_ID</code>的值,只要通过最新的一行，就能通过这两个参数找到本次事务所有的数据变动，构成了数值变动的版本链，这个版本链的作用就是:</p><blockquote><p>控制版本链的哪个版本针对哪个事务是可见的</p></blockquote><h3 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>当前事务的<code>ReadView</code>和 undo log 的版本链里面的<code>DB_TRX_ID</code>进行一定规则的比对，从版本链中最新的版本开始比对，直到找到可见的版本为止</p><h4 id="如何比对"><a href="#如何比对" class="headerlink" title="如何比对"></a>如何比对</h4><p>ReadView就是一个Class类，有如下字段：</p><p><strong>m_ids</strong>：ReadView创建时，活跃读写事务ID列表</p><p><strong>m_low_limit_id</strong>：ReadView创建时，活跃事务里面，最小的事务ID</p><p><strong>m_up_limit_id</strong>：ReadView创建时，活跃事务里面，最大的事务ID + 1</p><p><strong>m_creator_trx_id</strong>：ReadView创建者自身事务ID，仅开启事务是没有事务id的，默认为0，第一条语句执行后才会被赋予真正的值</p><h4 id="比对说明"><a href="#比对说明" class="headerlink" title="比对说明"></a>比对说明</h4><ul><li><p><code>DB_TRX_ID = creator_trx_id</code>：可见（当前事务可以看见自己修改的数据）</p></li><li><p><code>DB_TRX_ID &lt; m_low_limit_id</code> 时 : 可见（生成ReadView时，该事务已经提交）</p></li><li><p><code>DB_TRX_ID &gt;= m_up_limit_id</code> 时 :不可见（生成ReadView时，该事务还未创建）</p></li><li><p><code>m_low_limit_id &lt;= DB_TRX_ID &lt; m_up_limit_id</code>时</p></li><li><p>DB_TRX_ID 在 m_ids 列表里面 ：不可见（生成ReadView时，活跃事务还未提交）</p></li><li><p>DB_TRX_ID 不在 m_ids 列表里面 ：可见（生成ReadView时，事务已经提交）</p></li></ul><h4 id="什么时候生成ReadView"><a href="#什么时候生成ReadView" class="headerlink" title="什么时候生成ReadView"></a>什么时候生成ReadView</h4><p>什么时候生成和MySQL的事务隔离级别有关</p><ul><li>Read Committed (读已提交)：开启事务后，每次读请求都会创建一份新的ReadView将旧的替换</li><li>Repeatable Read (可重复读)：开启事务后，仅第一次读请求创建一次，直到事务结束</li></ul><h2 id="回到问题本身"><a href="#回到问题本身" class="headerlink" title="回到问题本身"></a>回到问题本身</h2><p>答案是：因为MySQL有不同的隔离级别，造成ReadView生成规则不一致，造成有有两种不同的结果</p><table><thead><tr><th align="center">序号</th><th align="center">A连接-事务A</th><th align="center">B连接</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">start transaction;</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">update student set stu_name &#x3D; “CCCCCC” where stu_id &#x3D; 1;</td></tr><tr><td align="center">3</td><td align="center">select stu_name from student where stu_id &#x3D; 1;</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">update student set stu_name &#x3D; “CCCCCC” where stu_id &#x3D; 2;</td></tr><tr><td align="center">5</td><td align="center">select stu_name from student where stu_id &#x3D; 2;</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">commit;</td><td align="center"></td></tr></tbody></table><p>REPEATABLE-READ (可重复读)</p><ul><li>序号3值：CCCCCC</li><li>序号5值：AAAAAA</li></ul><p>READ-COMMITTED(读已提交)</p><ul><li>序号3值：CCCCCC</li><li>序号5值：CCCCCC</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>MVCC在Read Uncommitted (读未提交)和Serializable (可串行化)下不工作，因为前者总是读取最新的数据行，后者会对所有读取的数据行加锁，也就不存在并发问题</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><p><a href="https://icyfenix.cn/architect-perspective/general-architecture/transaction/local.html">《凤凰架构》</a></p></li><li><p>《高性能MySQL》</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html">MySQL官方网站</a></p></li><li><p><a href="https://github.com/mysql/mysql-server/blob/5.7/storage/innobase/include/read0types.h">MySQL源码</a></p></li><li><p><a href="https://blog.jcole.us/innodb/">Jeremy Cole Blog</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/400965090">知乎文章1</a></p></li><li><p>查询MySQL事务隔离级别语句：<code>show variables like &#39;transaction_isolation&#39;;</code></p></li><li><p>改变数据库隔离级别：<code>SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></p></li></ul>]]></content>
    
    
    <summary type="html">剖析InnoDB的MVCC的实现原理</summary>
    
    
    
    <category term="数据库" scheme="https://ajungle.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://ajungle.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JDK8之List转Map实现解析</title>
    <link href="https://ajungle.cn/post/9a372c09.html"/>
    <id>https://ajungle.cn/post/9a372c09.html</id>
    <published>2022-04-23T09:08:00.000Z</published>
    <updated>2022-07-28T08:21:58.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>今天同事问到这个问题，之前只会实现，没有仔细分析过原理，现在分析分析</p></blockquote><h2 id="方式1（基本不用）"><a href="#方式1（基本不用）" class="headerlink" title="方式1（基本不用）"></a>方式1（基本不用）</h2><p>众所周知，在JDK8之后，List转Map的一般实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">list.add(student1);</span><br><span class="line">list.add(student2);</span><br><span class="line">list.add(student3);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Integer&gt; map = list.stream()</span><br><span class="line">    .collect(Collectors.toMap(Student::getName, Student::getAge));</span><br></pre></td></tr></table></figure><h3 id="方式一存在的问题"><a href="#方式一存在的问题" class="headerlink" title="方式一存在的问题"></a>方式一存在的问题</h3><p><code>Collectors.toMap()</code>调用的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, U&gt; Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(</span><br><span class="line">    Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; keyMapper,</span><br><span class="line">                                    Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; valueMapper) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CollectorImpl</span>&lt;&gt;(HashMap::<span class="keyword">new</span>,</span><br><span class="line">                               uniqKeysMapAccumulator(keyMapper, valueMapper),</span><br><span class="line">                               uniqKeysMapMerger(),</span><br><span class="line">                               CH_ID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用<code>CollectorImpl</code>的构造函数前，使用<code>uniqKeysMapAccumulator(keyMapper, valueMapper)</code>对数据进行了处理,处理代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T, K, V&gt;</span><br><span class="line">BiConsumer&lt;Map&lt;K, V&gt;, T&gt; <span class="title function_">uniqKeysMapAccumulator</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends K&gt; keyMapper,</span></span><br><span class="line"><span class="params">                                                Function&lt;? <span class="built_in">super</span> T, ? extends V&gt; valueMapper)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (map, element) -&gt; &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> keyMapper.apply(element);</span><br><span class="line">        <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> Objects.requireNonNull(valueMapper.apply(element));</span><br><span class="line">        <span class="type">V</span> <span class="variable">u</span> <span class="operator">=</span> map.putIfAbsent(k, v);</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="literal">null</span>) <span class="keyword">throw</span> duplicateKeyException(k, u, v);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Objects.requireNonNull</code>：对值进行了判断，如果为null则抛出<code>NullPointerException</code></li><li>通过<code>map.putIfAbsent(k, v);</code>及下面的判断，如果key已经存在，则抛出<code>duplicateKeyException</code></li></ul><h2 id="方式2（有缺陷）"><a href="#方式2（有缺陷）" class="headerlink" title="方式2（有缺陷）"></a>方式2（有缺陷）</h2><p><code>Collectors.toMap()</code>还有一个重载的方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, U&gt; Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(</span><br><span class="line">    Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; keyMapper,</span><br><span class="line">                                    Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; valueMapper,</span><br><span class="line">                                    BinaryOperator&lt;U&gt; mergeFunction) &#123;</span><br><span class="line">    <span class="keyword">return</span> toMap(keyMapper, valueMapper, mergeFunction, HashMap::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到return这里调用了类中另外一个同名不同参的<code>toMap</code>方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, U, M <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K, U&gt;&gt; Collector&lt;T, ?, M&gt; toMap(</span><br><span class="line">     Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; keyMapper,</span><br><span class="line">                             Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; valueMapper,</span><br><span class="line">                             BinaryOperator&lt;U&gt; mergeFunction,</span><br><span class="line">                             Supplier&lt;M&gt; mapFactory) &#123;</span><br><span class="line">    BiConsumer&lt;M, T&gt; accumulator</span><br><span class="line">        = (map, element) -&gt; map.merge(keyMapper.apply(element),</span><br><span class="line">                                      valueMapper.apply(element), mergeFunction);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CollectorImpl</span>&lt;&gt;(mapFactory, accumulator, mapMerger(mergeFunction), CH_ID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，可以通过定义自己的<code>mergeFunction</code>也就是<code>对应map.merge的第三个remappingFunction参数</code>的来控制如何累加，优化后如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">list.add(student1);</span><br><span class="line">list.add(student2);</span><br><span class="line">list.add(student3);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Integer&gt; map = list.stream()</span><br><span class="line">    .collect(Collectors.toMap(Student::getName, Student::getAge,(v1, v2)-&gt;v2));</span><br></pre></td></tr></table></figure><p>这里，传入了lambda表达式<code>(v1, v2)-&gt;v2)</code>，当key出现重复时，移除原key对应的键值对，放入新key的键值对，<code>map.merge</code>具体代码实现如下：</p><h3 id="方式2存在的问题"><a href="#方式2存在的问题" class="headerlink" title="方式2存在的问题"></a>方式2存在的问题</h3><p>在自定义key重复处处理逻辑后，在调用Map的merge方法时，实际上调用了<code>HashMap</code>的merge方法,在其第一行就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value == <span class="literal">null</span> || remappingFunction == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br></pre></td></tr></table></figure><p>当value为null时，抛出<code>NullPointerException</code>异常</p><h3 id="方式2问题一般的处理方式"><a href="#方式2问题一般的处理方式" class="headerlink" title="方式2问题一般的处理方式"></a>方式2问题一般的处理方式</h3><p>对null情况进行提前判断，并赋给默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = list.stream()</span><br><span class="line">.collect(Collectors.toMap(</span><br><span class="line">Student::getName, student -&gt; Optional.ofNullable(student.getAge()).orElse(<span class="number">1</span>)</span><br><span class="line">));</span><br></pre></td></tr></table></figure><h2 id="方式3（建议使用）"><a href="#方式3（建议使用）" class="headerlink" title="方式3（建议使用）"></a>方式3（建议使用）</h2><p>.collect()方法可以自定义自己的<code>累加器容器</code>、<code>累加器容器元素添加方式</code>、<code>累加器容器合并</code>，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = list.stream()</span><br><span class="line">        .collect(HashMap::<span class="keyword">new</span>,(m,v)-&gt;m.put(v.getName(),v.getAge()),HashMap::putAll);</span><br></pre></td></tr></table></figure><h2 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">5000000</span> ;i++)&#123;</span><br><span class="line">    Student student= <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;测试&quot;</span>+i,i );</span><br><span class="line">    list.add(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3-时间测试</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">now1</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">Map&lt;String, Integer&gt; map = list.stream()</span><br><span class="line">    .collect(HashMap::<span class="keyword">new</span>,(m,v)-&gt;m.put(v.getName(),v.getAge()),HashMap::putAll);</span><br><span class="line"><span class="type">Instant</span> <span class="variable">now2</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(<span class="string">&quot;方式3-时间测试：&quot;</span>+Duration.between(now1,now2).toMillis());</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2-时间测试</span></span><br><span class="line">Map&lt;String, Integer&gt; map2 = list.stream()</span><br><span class="line">    .collect(Collectors.toMap(</span><br><span class="line">        Student::getName, student -&gt; Optional.ofNullable(student.getAge()).orElse(<span class="number">1</span>)</span><br><span class="line">    ));</span><br><span class="line"><span class="type">Instant</span> <span class="variable">now3</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(<span class="string">&quot;方式2-时间测试：&quot;</span>+Duration.between(now2,now3).toMillis());</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用forEach</span></span><br><span class="line">Map&lt;String, Integer&gt; map3 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line"><span class="keyword">for</span>(Student student:list)&#123;</span><br><span class="line">    map3.put(student.getName(),student.getAge());</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Instant</span> <span class="variable">now4</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(<span class="string">&quot;时间间隔3：&quot;</span>+Duration.between(now3,now4).toMillis());</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方式<span class="number">3</span>-时间测试：<span class="number">738</span></span><br><span class="line">方式<span class="number">2</span>-时间测试：<span class="number">591</span></span><br><span class="line">时间间隔<span class="number">3</span>：<span class="number">338</span></span><br></pre></td></tr></table></figure><blockquote><p>​可以看到，方式3虽然能够避免了空指针及键重复问题，但是创建map和putall的行为仍然会消耗额外时间，但是和方式2消耗时间差距不大，所以对性能要求不高时采用是没有什么问题的。</p><p>​    直接使用forEach是时间最快的，但是需要自己维护实现细节，对性能要求高大批量数据时可以使用</p></blockquote><h2 id="额外记录"><a href="#额外记录" class="headerlink" title="额外记录"></a>额外记录</h2><p><code>.collect</code>：流的终端操作，接收一个<code>Collector&lt;? super T, A, R&gt; collector</code>参数，主要的作用是将流中元素汇聚成一个结果。</p><p>最终调用了<code>CollectorImpl</code>类的4参数构造函数，进行了返回，所以对<code>CollectorImpl</code>类进行分析，<code>CollectorImpl</code>实现了<code>Collector</code>接口，接口未如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collector</span>&lt;T, A, R&gt; &#123;</span><br><span class="line">    Supplier&lt;A&gt; <span class="title function_">supplier</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    BiConsumer&lt;A, T&gt; <span class="title function_">accumulator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    BinaryOperator&lt;A&gt; <span class="title function_">combiner</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Function&lt;A, R&gt; <span class="title function_">finisher</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Set&lt;Characteristics&gt; <span class="title function_">characteristics</span><span class="params">()</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p><code>supplier()</code>：返回一个新的累加器容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>accumulator()</code>：将元素添加进累加器容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BiConsumer</span>&lt;T, U&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t, U u)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>combiner()</code>：合并两个累加器容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BinaryOperator</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BiFunction</span>&lt;T,T,T&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BiFunction</span>&lt;T, U, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t, U u)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>finisher()</code>：结束前对累加器容器进行转换，转换成最终结果容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>characteristics()</code>：定义<code>combiner()</code>函数的行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Characteristics</span> &#123;</span><br><span class="line"><span class="comment">//表明默认多线程（得到并行流情况下）可以并行调用accumulator()且最终结果正确，不需要调用combiner()，因为操作的是同一个结果容器</span></span><br><span class="line">    CONCURRENT,</span><br><span class="line"><span class="comment">//不保证结果的顺序性</span></span><br><span class="line">    UNORDERED,</span><br><span class="line"><span class="comment">//表明 累加器容器 等于 最终结果容器，所以就不会调用finisher()进行最终转换</span></span><br><span class="line">    IDENTITY_FINISH</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">阐述了JDK8关于List转Map的几种方式及优缺点</summary>
    
    
    
    <category term="编程" scheme="https://ajungle.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JDK8" scheme="https://ajungle.cn/tags/JDK8/"/>
    
    <category term="编程" scheme="https://ajungle.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="https://ajungle.cn/post/907a70d0.html"/>
    <id>https://ajungle.cn/post/907a70d0.html</id>
    <published>2022-02-10T12:28:00.000Z</published>
    <updated>2022-12-03T13:02:07.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="静态代理的特点"><a href="#静态代理的特点" class="headerlink" title="静态代理的特点"></a>静态代理的特点</h3><ul><li><code>代理对象</code>和<code>被代理对象</code>实现同一个接口</li><li><code>代理对象</code>持有<code>被代理对象</code>的引用</li><li>调用时，<code>代理对象</code>调用<code>被代理对象</code>的相应方法，可以在调用的前后，增加额外功能</li></ul><h3 id="静态代理的实例"><a href="#静态代理的实例" class="headerlink" title="静态代理的实例"></a>静态代理的实例</h3><blockquote><p>​实例作用：保存数据时，进行事务控制</p></blockquote><h3 id="原方法"><a href="#原方法" class="headerlink" title="原方法"></a>原方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UsUserMapper usUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//用户信息</span></span><br><span class="line">        <span class="type">UsUser</span> <span class="variable">usUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsUser</span>();</span><br><span class="line">        usUser.setUserId(<span class="number">1234567912</span>);</span><br><span class="line">        usUser.setUserAccount(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        usUserMapper.insert(usUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态代理后"><a href="#静态代理后" class="headerlink" title="静态代理后"></a>静态代理后</h3><p><strong>1.增加接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServiceI</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.<code>被代理对象</code>实现接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserServiceI</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UsUserMapper usUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//用户信息</span></span><br><span class="line">        <span class="type">UsUser</span> <span class="variable">usUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsUser</span>();</span><br><span class="line">        usUser.setUserId(<span class="number">1234567912</span>);</span><br><span class="line">        usUser.setUserAccount(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        usUserMapper.insert(usUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.<code>代理对象</code>实现接口，同时持有<code>被代理对象</code>的引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserStaticProxyService</span> <span class="keyword">implements</span> <span class="title class_">UserServiceI</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PlatformTransactionManager platformTransactionManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    TransactionDefinition transactionDefinition;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">TransactionStatus</span> <span class="variable">transactionStatus</span> <span class="operator">=</span> platformTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.insertUser();</span><br><span class="line">            <span class="comment">//未发生异常,事务提交</span></span><br><span class="line">            platformTransactionManager.commit(transactionStatus);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//发生异常,回滚事务</span></span><br><span class="line">            platformTransactionManager.rollback(transactionStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用方式：注入<code>代理类</code>的bean，由<code>代理类</code>持有<code>被代理类</code>的引用来调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserStaticProxyService userStaticProxyService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;第一次测试接口&quot;,notes = &quot;@author jungle&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/one&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">testOne</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//代理类调用</span></span><br><span class="line">        userStaticProxyService.insertUser();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="静态代理和动态代理的区别"><a href="#静态代理和动态代理的区别" class="headerlink" title="静态代理和动态代理的区别"></a>静态代理和动态代理的区别</h3><ol><li><code>静态代理</code>在编译生成class文件，<code>动态代理</code>在运行时生成字节码加载到JVM</li><li><code>静态代理</code>的<code>代理对象</code>和<code>被代理对象</code>都需要实现同一接口，动态代理则无此限制</li></ol><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ul><li><code>需要代理的类</code>需要实现一个接口中的所有抽象方法</li><li>通过<code>Proxy</code>类的<code>newProxyInstance</code>指定<code>类加载器</code>、<code>需要代理的类接口</code>及<code>执行代理类中方法的执行器</code></li><li><code>执行代理类中方法的执行器</code>需要实现<code>InvocationHandler</code>接口，执行调用逻辑</li></ul><p>Proxy  ： 负责动态生成代理</p><ul><li>newProxyInstance<ul><li>ClassLoader   被代理类的类加载器</li><li>Class&lt;?&gt;[]       代理类要实现的接口</li><li>InvocationHandler    代理类中需要加入的功能</li></ul></li></ul><p>InvocationHandler：代理类新增的功能</p><ul><li>invoke<ul><li>Object  proxy   代理的实例</li><li>Method             被拦截的方法</li><li>Object[] args    方法的参数</li></ul></li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createProxy</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//找到被代理类的所有接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//找到代理逻辑</span></span><br><span class="line">        <span class="type">PerformanceMonitorHandler</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PerformanceMonitorHandler</span>(target);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader,interfaces,h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NuclearWeaponBoomService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startBoom</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NuclearWeaponBoomServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">NuclearWeaponBoomService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startBoom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;  i&gt; <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;线程异常&quot;</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;boom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceMonitorHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PerformanceMonitorHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//前置处理</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">before</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//执行方法调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">//后置处理</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">after</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法:&quot;</span>+method.getName()+<span class="string">&quot;共执行了:&quot;</span>+(after-before)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerfApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NuclearWeaponBoomService</span> <span class="variable">nwbs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NuclearWeaponBoomServiceImpl</span>();</span><br><span class="line">        <span class="type">NuclearWeaponBoomService</span> <span class="variable">proxy</span> <span class="operator">=</span> (NuclearWeaponBoomService)ProxyFactory.createProxy(nwbs);</span><br><span class="line">        proxy.startBoom();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​注：曾用此实现了生产Redis降级<del>.</del></p></blockquote><h3 id="CGlib动态代理"><a href="#CGlib动态代理" class="headerlink" title="CGlib动态代理"></a>CGlib动态代理</h3><h4 id="实习方式"><a href="#实习方式" class="headerlink" title="实习方式"></a>实习方式</h4><ul><li>cglib : code generation lib 代码生成库</li><li>使用继承的方式来生成代理类</li><li>代理类继承被代理类，覆盖被代理类的方法，在实现中调用父类的相应方法</li></ul><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createProxy</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">        <span class="comment">//创建增强器</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//设置被代理类,也就是父类</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置方法拦截器,也就是代理逻辑</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">PerformanceMonitorInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NuclearWeaponBoomServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">Nuclear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startBoom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;  i&gt; <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;线程异常&quot;</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;boom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerformanceMonitorInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object target, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//前置处理</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">before</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//调用父类相应方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invokeSuper(target, args);</span><br><span class="line">        <span class="comment">//后置处理</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">after</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法:&quot;</span>+method.getName()+<span class="string">&quot;共执行了:&quot;</span>+(after-before)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Nuclear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startBoom</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerfApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Nuclear</span> <span class="variable">nwbs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NuclearWeaponBoomServiceImpl</span>();</span><br><span class="line">        <span class="type">Nuclear</span> <span class="variable">proxy</span> <span class="operator">=</span> (Nuclear)CglibProxyFactory.createProxy(nwbs);</span><br><span class="line">        proxy.startBoom();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK、CGlib动态代理的区别"><a href="#JDK、CGlib动态代理的区别" class="headerlink" title="JDK、CGlib动态代理的区别"></a>JDK、CGlib动态代理的区别</h3><ul><li>jdk使用接口的方式实现动态代理</li><li>cglib使用继承的方式实现动态代理</li><li>性能：jdk1.8之前 cglib 胜出  、 jdk1.8之后 jdk方式胜出</li><li>spring 默认是用jdk动态代理生成代理类，但是也支持cglib</li></ul>]]></content>
    
    
    <summary type="html">设计模式之代理模式</summary>
    
    
    
    <category term="设计模式" scheme="https://ajungle.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://ajungle.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美</title>
    <link href="https://ajungle.cn/post/ba23f4e8.html"/>
    <id>https://ajungle.cn/post/ba23f4e8.html</id>
    <published>2022-01-05T13:30:00.000Z</published>
    <updated>2022-12-03T13:08:12.258Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>明日复明日，明日何其多。我生待明日，万事成蹉跎</strong></p><div style="text-align:right"><b><<明日歌>></b></div><hr><p>注：本文根据王争老师的《设计模式之美》进行了总结及优化，适合快速查找实现方式，并无探究实现原理及细节，如需探求底层设计思想，请阅读《设计模式之美》原文</p><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><blockquote><p>​由5个原则组成</p></blockquote><h3 id="S-单一职责"><a href="#S-单一职责" class="headerlink" title="S(单一职责)"></a>S(单一职责)</h3><p>英文：<code>Single Responsibility Principle</code></p><p>如何判断是否满足单一：</p><ul><li><p>主观判断</p><ul><li>不同应用场景、不同需求阶段下，判断的依据不同，需要动态分析</li></ul></li><li><p>客观判断（也有很大主观性）</p><ul><li>类、属性、函数、代码过多（过多这个词就有很大主观性，需要分析和一定经验）</li><li>依赖过多、私有方法过多</li><li>类很难取名或者类中的大量方法都是操作某几个属性</li></ul></li></ul><h3 id="O（开闭）"><a href="#O（开闭）" class="headerlink" title="O（开闭）"></a>O（开闭）</h3><p>英文：<code>Open Closed Principle</code></p><p>如何理解和实现“多扩展开放，对修改关闭”：</p><ul><li>代码可以让其他人不通过修改原有代码，就能够增加新的功能，这就是扩展性强的表现；平时多注意和学习扩展、抽象、封装这些知识，常说的设计模式，很多也是为了满足开闭而出现的</li></ul><h3 id="L-里式替换"><a href="#L-里式替换" class="headerlink" title="L(里式替换)"></a>L(里式替换)</h3><p>英文：<code>Liskov Substitution Principle</code></p><p>在继承关系中，子类的设计要满足可以替换掉父类，且不改变原有的逻辑和正确性</p><h3 id="I-接口隔离"><a href="#I-接口隔离" class="headerlink" title="I(接口隔离)"></a>I(接口隔离)</h3><p>英文：<code>Interface Segregation Principle</code></p><p>调用者不应依赖到不需要的接口</p><h3 id="D（依赖反转）"><a href="#D（依赖反转）" class="headerlink" title="D（依赖反转）"></a>D（依赖反转）</h3><p>英文：<code>Inversion Of Control</code></p><ul><li>控制反转：原来由自己控制整个流程执行，交给框架后由框架来进行控制</li><li>依赖注入：不通过new创建对象，而通过构造函数或函数传参等方式传递给类使用</li><li>依赖反转：高层模块不应依赖底层模块，而是应该通过抽象进行互相依赖，抽象不应依赖具体实现细节，具体实现细节依赖抽象</li></ul><h2 id="KISS"><a href="#KISS" class="headerlink" title="KISS"></a>KISS</h2><p>英文：<code>Keep It Short and Simple</code></p><p>尽量保持简单</p><h2 id="YAGNI"><a href="#YAGNI" class="headerlink" title="YAGNI"></a>YAGNI</h2><p>英文：<code>Yor Ain&#39;t Gonna Need It</code></p><p>不要过度设计</p><h2 id="DRY"><a href="#DRY" class="headerlink" title="DRY"></a>DRY</h2><p>英文：<code>Don&#39;t Repeat Yourself</code></p><p>不要写重复代码</p><h2 id="LOD"><a href="#LOD" class="headerlink" title="LOD"></a>LOD</h2><p>英文：<code>The Least Knowledge Principle</code></p><p>迪米特法则&#x2F;最小知识原则：</p><p>不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型（4）"><a href="#创建型（4）" class="headerlink" title="创建型（4）"></a>创建型（4）</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//1.构造函数私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.静态化参数-同时赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">IdGenerator</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IdGenerator</span>();</span><br><span class="line">    <span class="comment">//3.提供公共方法供读取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGenerator <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​优点：可以将初始化提前，帮助提早发现问题</p></blockquote><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//1.构造函数私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.静态化参数-延迟赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">IdGenerator</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//3.提供公共方法供读取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> IdGenerator <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IdGenerator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉式（双重检测）"><a href="#懒汉式（双重检测）" class="headerlink" title="懒汉式（双重检测）"></a>懒汉式（双重检测）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//1.构造函数私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.静态化参数-延迟赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">IdGenerator</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//3.提供公共方法供读取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGenerator <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (IdGenerator.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IdGenerator</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​优点：锁的范围更小，并发量更大</p></blockquote><p>上面的<code>id</code>加上了<code>volatile</code>修饰符，作用是防止指令重排序，<code>参数 = new 对象()</code>有三步</p><ol><li>分配空间（对象的大小）</li><li>空间赋值（对象的内容）</li><li>将空间地址赋值给参数（对象的空间地址给参数）</li></ol><p>而在实际执行过程中，可能1直接到3，然后在2执行前，就使用了其中的方法，导致运行错误</p><blockquote><p>​新版本JDK内部已经将1、2、3进行了原子化处理，不用再加<code>volatile</code>修饰符了</p></blockquote><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//1.构造函数私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingleHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">IdGenerator</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IdGenerator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.提供公共方法供读取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGenerator <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​优点：和<code>懒汉式（双重检测）</code>功能一样，但是更简洁</p></blockquote><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​优点：更简洁！</p></blockquote><p><a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9">枚举类实现单例的原理</a></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p>例如：设计一个消息发送功能模块，根据不同行为，创建不同的发送服务进行调用</p><h5 id="前置步骤-创建接口"><a href="#前置步骤-创建接口" class="headerlink" title="前置步骤-创建接口"></a>前置步骤-创建接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SendInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String receiver,String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前置步骤-创建不同实现类"><a href="#前置步骤-创建不同实现类" class="headerlink" title="前置步骤-创建不同实现类"></a>前置步骤-创建不同实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邮件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> <span class="keyword">implements</span> <span class="title class_">SendInterface</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String receiver, String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送给&quot;</span>+receiver+<span class="string">&quot;,信息:&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//站内信</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerService</span>  <span class="keyword">implements</span> <span class="title class_">SendInterface</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String receiver, String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送给&quot;</span>+receiver+<span class="string">&quot;,信息:&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//短信</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsService</span>  <span class="keyword">implements</span> <span class="title class_">SendInterface</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String receiver, String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送给&quot;</span>+receiver+<span class="string">&quot;,信息:&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前置步骤-逻辑处理"><a href="#前置步骤-逻辑处理" class="headerlink" title="前置步骤-逻辑处理"></a>前置步骤-逻辑处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Notifacation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String type,String receiver,String message)</span>&#123;</span><br><span class="line">        <span class="type">SendInterface</span> <span class="variable">sendInterface</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;email&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//邮件</span></span><br><span class="line">            sendInterface = <span class="keyword">new</span> <span class="title class_">EmailService</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;sms&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//短信</span></span><br><span class="line">            sendInterface = <span class="keyword">new</span> <span class="title class_">SmsService</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;inner&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//站内信</span></span><br><span class="line">            sendInterface = <span class="keyword">new</span> <span class="title class_">InnerService</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;发送类型错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sendInterface.send(receiver,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​上面代码是我实际处理消息模块的实现思路，根据不同的<code>type</code>动态调用不同的实现类</p></blockquote><h5 id="简单工厂-不带缓存"><a href="#简单工厂-不带缓存" class="headerlink" title="简单工厂-不带缓存"></a>简单工厂-不带缓存</h5><p>上面<code>逻辑处理</code>的部分，可以将对象的创建独立出来，就变成简单工厂的方式了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Notifacation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String type,String receiver,String message)</span>&#123;</span><br><span class="line">        <span class="type">SendInterface</span> <span class="variable">sendInterface</span> <span class="operator">=</span> createSendInterfaceFactory(type);</span><br><span class="line">        sendInterface.send(receiver,message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> SendInterface <span class="title function_">createSendInterfaceFactory</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;email&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//邮件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmailService</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;sms&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//短信</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsService</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;inner&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//站内信</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InnerService</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;发送类型错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="简单工厂-带缓存"><a href="#简单工厂-带缓存" class="headerlink" title="简单工厂-带缓存"></a>简单工厂-带缓存</h5><p>上面处理每次调用会创建新的对象，调用比较频繁会占用大量资源，可以创建后缓存起来，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Notifacation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,SendInterface&gt; cacheMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cacheMap.put(<span class="string">&quot;email&quot;</span>,<span class="keyword">new</span> <span class="title class_">EmailService</span>());</span><br><span class="line">        cacheMap.put(<span class="string">&quot;sms&quot;</span>,<span class="keyword">new</span> <span class="title class_">SmsService</span>());</span><br><span class="line">        cacheMap.put(<span class="string">&quot;inner&quot;</span>,<span class="keyword">new</span> <span class="title class_">InnerService</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String type,String receiver,String message)</span>&#123;</span><br><span class="line">        <span class="type">SendInterface</span> <span class="variable">sendInterface</span> <span class="operator">=</span> createSendInterface(type);</span><br><span class="line">        sendInterface.send(receiver,message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> SendInterface <span class="title function_">createSendInterface</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheMap.get(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><p>作用：将创建实现类抽离出去</p><h5 id="创建工厂方法接口"><a href="#创建工厂方法接口" class="headerlink" title="创建工厂方法接口"></a>创建工厂方法接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SendInterfaceFactory</span> &#123;</span><br><span class="line">    SendInterface <span class="title function_">createSendInterface</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建实现类工厂"><a href="#创建实现类工厂" class="headerlink" title="创建实现类工厂"></a>创建实现类工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邮件工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailServiceFactory</span> <span class="keyword">implements</span> <span class="title class_">SendInterfaceFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendInterface <span class="title function_">createSendInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmailService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//站内信工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerServiceFactory</span> <span class="keyword">implements</span> <span class="title class_">SendInterfaceFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendInterface <span class="title function_">createSendInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InnerService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//短信工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceFactory</span> <span class="keyword">implements</span> <span class="title class_">SendInterfaceFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendInterface <span class="title function_">createSendInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="逻辑处理"><a href="#逻辑处理" class="headerlink" title="逻辑处理"></a>逻辑处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Notifacation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String type,String receiver,String message)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SendInterfaceFactory</span> <span class="variable">sendInterfaceFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;email&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//邮件</span></span><br><span class="line">            sendInterfaceFactory = <span class="keyword">new</span> <span class="title class_">EmailServiceFactory</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;sms&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//短信</span></span><br><span class="line">            sendInterfaceFactory = <span class="keyword">new</span> <span class="title class_">SmsServiceFactory</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;inner&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">//站内信</span></span><br><span class="line">            sendInterfaceFactory = <span class="keyword">new</span> <span class="title class_">InnerServiceFactory</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;发送类型错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SendInterface</span> <span class="variable">sendInterface</span> <span class="operator">=</span> sendInterfaceFactory.createSendInterface();</span><br><span class="line">        sendInterface.send(receiver,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​可以看到，这里只是将类的创建抽象出去，但是没有干掉if-else</p></blockquote><h5 id="逻辑处理-优化-去掉if-else"><a href="#逻辑处理-优化-去掉if-else" class="headerlink" title="逻辑处理(优化-去掉if-else)"></a>逻辑处理(优化-去掉if-else)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Notifacation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,SendInterfaceFactory&gt; mapFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        mapFactory.put(<span class="string">&quot;email&quot;</span>,<span class="keyword">new</span> <span class="title class_">EmailServiceFactory</span>());</span><br><span class="line">        mapFactory.put(<span class="string">&quot;sms&quot;</span>,<span class="keyword">new</span> <span class="title class_">SmsServiceFactory</span>());</span><br><span class="line">        mapFactory.put(<span class="string">&quot;inner&quot;</span>,<span class="keyword">new</span> <span class="title class_">InnerServiceFactory</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String type,String receiver,String message)</span>&#123;</span><br><span class="line">        <span class="type">SendInterfaceFactory</span> <span class="variable">sendInterfaceFactory</span> <span class="operator">=</span> createSendInterfaceFactory(type);</span><br><span class="line">        <span class="type">SendInterface</span> <span class="variable">sendInterface</span> <span class="operator">=</span> sendInterfaceFactory.createSendInterface();</span><br><span class="line">        sendInterface.send(receiver,message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> SendInterfaceFactory <span class="title function_">createSendInterfaceFactory</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapFactory.get(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h4><p>作用：对多种情况下的优化，例如出现需要根据配置文件的方式进行消息的发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SendInterfaceFactory</span> &#123;</span><br><span class="line">    SendInterface <span class="title function_">createSendInterface</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    SendConfigInterface <span class="title function_">createSendConfigInterface</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​增加后，所有工厂类需要实现此抽象方法，即每个工厂类都可以创建两个处理相同事情，但是不同的处理方式的实现类</p></blockquote><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h4 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h4><p>原代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Boolean isStudent;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age, Boolean isStudent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.isStudent = isStudent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(address == <span class="literal">null</span> || address.length() &gt; <span class="number">20</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;地址参数设置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于一般实体类的属性值设置，采取的方式是：1.<code>必传字段通过构造函数传入</code>2.<code>非必填字段通过</code></p><p>存在的问题：</p><ol><li>如果必传字段很多，则构造函数会太长，而如果不通过构造函数传入，而是通过set方法赋值，则在没调用set方法的情况下，必传字段无法进行校验</li><li>如果属性值有依赖关系，例如<code>isStudent</code>是true,则必须传地址，也没有办法处理</li><li>如果要求对象是不可变对象时，即创建后，不能暴露出set方法</li></ol><h4 id="通过建造者模式优化"><a href="#通过建造者模式优化" class="headerlink" title="通过建造者模式优化"></a>通过建造者模式优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Boolean isStudent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(PersonBuilder personBuilder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = personBuilder.name;</span><br><span class="line">        <span class="built_in">this</span>.age = personBuilder.age;</span><br><span class="line">        <span class="built_in">this</span>.address = personBuilder.address;</span><br><span class="line">        <span class="built_in">this</span>.isStudent = personBuilder.isStudent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PersonBuilder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">DEFAULT_IS_STUDENT</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isStudent</span> <span class="operator">=</span> DEFAULT_IS_STUDENT;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Person <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//build的时候进行参数校验，依赖关系校验等</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.isStudent == <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(address == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;学生必须有地址&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PersonBuilder <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!StringUtils.hasText(name))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;姓名必须不为空&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PersonBuilder <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(age == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;年龄必须不为空&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PersonBuilder <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.address = address;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PersonBuilder <span class="title function_">setStudent</span><span class="params">(Boolean student)</span> &#123;</span><br><span class="line">            isStudent = student;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>.Builder()</span><br><span class="line">    .setName(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    .setAge(<span class="number">18</span>)</span><br><span class="line">    .setStudent(<span class="literal">true</span>)</span><br><span class="line">    .setAddress(<span class="string">&quot;我有地址&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h4 id="lombok形式"><a href="#lombok形式" class="headerlink" title="lombok形式"></a>lombok形式</h4><p>再次优化成lombok的注解<code>@Builder</code>的形式</p><p>在<code>Person</code>类中增加如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Person.PersonBuilder <span class="title function_">builder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>.PersonBuilder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> Person.builder()</span><br><span class="line">    .setName(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    .setAge(<span class="number">18</span>)</span><br><span class="line">    .setStudent(<span class="literal">true</span>)</span><br><span class="line">    .setAddress(<span class="string">&quot;我有地址&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><blockquote><p>​可以看到，只要再给静态内部类的set相关方法名换一下，就可以做到和lombok的@builder注解完全一致的效果</p></blockquote><h4 id="Accessors的使用"><a href="#Accessors的使用" class="headerlink" title="@Accessors的使用"></a>@Accessors的使用</h4><p><code>Accessors</code>注解有三个属性</p><ul><li><code>fluent</code>：会将set前缀去掉，例如原来方法名是<code>setName</code>，加上后就变成<code>name</code></li><li><code>chain</code>：set方法将返回this代替原本的void</li></ul><p>使用<code>@Accessors</code>和<code>@Setter</code>配合可以很好的简化原来静态内部类的代码，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Boolean isStudent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(PersonBuilder personBuilder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = personBuilder.name;</span><br><span class="line">        <span class="built_in">this</span>.age = personBuilder.age;</span><br><span class="line">        <span class="built_in">this</span>.address = personBuilder.address;</span><br><span class="line">        <span class="built_in">this</span>.isStudent = personBuilder.isStudent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Person.PersonBuilder <span class="title function_">builder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>.PersonBuilder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Accessors(fluent = true,chain = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PersonBuilder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">DEFAULT_IS_STUDENT</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isStudent</span> <span class="operator">=</span> DEFAULT_IS_STUDENT;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Person <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//build的时候进行参数校验，依赖关系校验等</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.isStudent == <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(address == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;学生必须有地址&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>简化后使用方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> Person.builder()</span><br><span class="line">    .name(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    .age(<span class="number">18</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>利用已有对象进行复制的方式，来创建新对象，达到节省空间及时间的方式，叫做原型模式，需要理解下<a href="https://ajungle.cn/2019/02/12/%E9%97%AE%E9%A2%98/%E3%80%90%E9%97%AE%E9%A2%98%E3%80%91Java%E6%B7%B1%E5%85%8B%E9%9A%86%E6%B5%85%E5%85%8B%E9%9A%86/#%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%A4%8D%E5%88%B6%E6%96%B9%E5%BC%8F">浅拷贝和深拷贝</a>。在复制时可以采取浅拷贝老对象得到新对象，新对象指向老对象指向的的散列值，然后新对象对需要更新的内部值进行移除，再添加（移除指向散列值的引用，再添加新引用，则不会影响到老对象指向的散列值），而如果直接修改，会对老对象指向的散列值造成影响，不可取。</p><h2 id="结构型（7）"><a href="#结构型（7）" class="headerlink" title="结构型（7）"></a>结构型（7）</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>作用：将业务代码与非业务代码进行分离</p><p>常用场景：监控、统计、鉴权、限流、事务、幂等</p><p><a href="/post/907a70d0.html">详细介绍请点击此处</a></p><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><ul><li>理解方式一：<code>将抽象和实现解耦，让它们可以独立变化</code></li><li>理解方式二：<code>通过组合代替继承关系，避免继承层次的指数级爆炸</code></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>JDBC驱动实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://119.91.255.95/blog?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;allowMultiQueries=true&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">queryStr</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(queryStr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">    resultSet.getString(<span class="number">1</span>);</span><br><span class="line">    resultSet.getInt(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h3 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h3><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h2 id="行为型（11）"><a href="#行为型（11）" class="headerlink" title="行为型（11）"></a>行为型（11）</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><h3 id="中介模式"><a href="#中介模式" class="headerlink" title="中介模式"></a>中介模式</h3>]]></content>
    
    
    <summary type="html">设计模式之美阅读总结</summary>
    
    
    
    <category term="书籍" scheme="https://ajungle.cn/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="书籍" scheme="https://ajungle.cn/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《Effective Java》学习笔记</title>
    <link href="https://ajungle.cn/post/e1b9f839.html"/>
    <id>https://ajungle.cn/post/e1b9f839.html</id>
    <published>2021-11-27T10:27:00.000Z</published>
    <updated>2022-11-30T14:05:30.684Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​仅记录自己学习过，且有一定自我理解和思考的</p></blockquote><h2 id="考虑使用静态工厂方法替代构造方法"><a href="#考虑使用静态工厂方法替代构造方法" class="headerlink" title="考虑使用静态工厂方法替代构造方法"></a>考虑使用静态工厂方法替代构造方法</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>有名字</p></li><li><p>不需要每次调用时创建对象，例：<code>Boolean.valueOf(?)</code></p></li><li><p>可以返回其返回类型的任何子类型的对象，例：<code>Collections.unmodifiableCollection(?)</code></p></li><li><p>返回对象的类，可以根据输入参数的不同而不同，例：<code>EnumSet.noneOf(?)</code></p></li><li><p>编写包含该方法的类时，返回的对象的类不需要存在，例：<code>ServiceLoader.load(?)</code></p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>没有public或者protected构造方法的类不能被子类化</p></li><li><p>API文档中很难找到</p></li></ul><h2 id="当构造方法参数过多时使用builder模式"><a href="#当构造方法参数过多时使用builder模式" class="headerlink" title="当构造方法参数过多时使用builder模式"></a>当构造方法参数过多时使用builder模式</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>解决参数过多问题</li><li>可以对参数间依赖关系进行校验</li><li>去掉创建对象时的中间状态</li><li>可以不暴露类中的set方法，使其变成不可变对象</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>创建对象前必须先创建它的builder</li><li>代码比较复杂，4个以上参数才适用</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>简单情况下可以直接使用@Builder</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(StudentBuilder studentBuilder)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id  = studentBuilder.id;</span><br><span class="line">        <span class="built_in">this</span>.name = studentBuilder.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Student.StudentBuilder <span class="title function_">builder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>.StudentBuilder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Accessors(fluent = true,chain = true)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StudentBuilder</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StudentBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Student <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!StringUtils.hasText(name))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;name not support empty&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Student.builder()</span><br><span class="line">    .id(<span class="string">&quot;001&quot;</span>)</span><br><span class="line">    .name(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h2 id="实现-Singleton-属性"><a href="#实现-Singleton-属性" class="headerlink" title="实现 Singleton 属性"></a>实现 Singleton 属性</h2><h3 id="私有构造方法"><a href="#私有构造方法" class="headerlink" title="私有构造方法"></a>私有构造方法</h3><h4 id="饿汉式（类加载时创建）"><a href="#饿汉式（类加载时创建）" class="headerlink" title="饿汉式（类加载时创建）"></a>饿汉式（类加载时创建）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">LogGenerator</span> <span class="variable">LOG_GENERATOR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogGenerator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LogGenerator</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LogGenerator <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LOG_GENERATOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类加载的时候创建，如果类的初始化时间较长，可以将其初始化过程暴露在程序启动时。</p><h4 id="懒汉式-第一次使用时创建"><a href="#懒汉式-第一次使用时创建" class="headerlink" title="懒汉式(第一次使用时创建)"></a>懒汉式(第一次使用时创建)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LogGenerator LOG_GENERATOR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LogGenerator</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LogGenerator <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LOG_GENERATOR == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LogGenerator.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(LOG_GENERATOR == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogGenerator</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LOG_GENERATOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>null判断后加锁再判断：</strong>只判断一次，线程并发会出现问题</p><p><strong>volatile：</strong>防止指令重排序，初始化对象分为三步：1.分配内存 2.调用构造函数初始化对象 3.将初始化对象的地址放在分配内存里。其中第3步可能被重排序在第2步前，此时分配内存已不为null，但是还未初始化对象，使用对象会出现问题。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LogGenerator</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LogGenerator <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LogGeneratorHolder.LOG_GENERATOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LogGeneratorHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LogGenerator</span> <span class="variable">LOG_GENERATOR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogGenerator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由JVM保证线程安全，同时实现了懒加载</p><h4 id="枚类"><a href="#枚类" class="headerlink" title="枚类"></a>枚类</h4><p>天然线程安全</p>]]></content>
    
    
    <summary type="html">《Effective Java》学习笔记</summary>
    
    
    
    <category term="书籍" scheme="https://ajungle.cn/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="编程,书籍" scheme="https://ajungle.cn/tags/%E7%BC%96%E7%A8%8B-%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>MySQL排序后分页错乱问题分析</title>
    <link href="https://ajungle.cn/post/5c684e4d.html"/>
    <id>https://ajungle.cn/post/5c684e4d.html</id>
    <published>2021-11-12T11:55:50.000Z</published>
    <updated>2022-11-26T08:38:58.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从问题出发"><a href="#从问题出发" class="headerlink" title="从问题出发"></a>从问题出发</h2><p>一位老开发每次说到<code>order by</code>的时候，都要提到一个事，那就是要带上一个有<code>唯一键</code>的列，否则会出现问题。具体是啥问题，似乎也遗忘在了时间的流逝里。</p><p><strong>1.建个表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `modify_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `student_id_IDX` (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)  COMMENT<span class="operator">=</span><span class="string">&#x27;学生表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>2.插入一些数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">student</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(&quot;STU000001&quot;,&quot;001&quot;,&quot;2012-12-01 12:12:12&quot;,&quot;2012-12-01 12:12:12&quot;),</span><br><span class="line">(&quot;STU000002&quot;,&quot;002和002时间一致&quot;,&quot;2012-12-02 12:12:12&quot;,&quot;2012-12-02 12:12:12&quot;),</span><br><span class="line">(&quot;STU000003&quot;,&quot;003和002时间一致&quot;,&quot;2012-12-02 12:12:12&quot;,&quot;2012-12-02 12:12:12&quot;),</span><br><span class="line">(&quot;STU000004&quot;,&quot;004和002时间一致&quot;,&quot;2012-12-02 12:12:12&quot;,&quot;2012-12-02 12:12:12&quot;),</span><br><span class="line">(&quot;STU000005&quot;,&quot;005和002时间一致&quot;,&quot;2012-12-02 12:12:12&quot;,&quot;2012-12-02 12:12:12&quot;),</span><br><span class="line">(&quot;STU000006&quot;,&quot;006&quot;,&quot;2012-12-06 12:12:12&quot;,&quot;2012-12-02 12:12:12&quot;),</span><br><span class="line">(&quot;STU000007&quot;,&quot;007和002时间一致&quot;,&quot;2012-12-02 12:12:12&quot;,&quot;2012-12-02 12:12:12&quot;),</span><br><span class="line">(&quot;STU000008&quot;,&quot;008和002时间一致&quot;,&quot;2012-12-02 12:12:12&quot;,&quot;2012-12-02 12:12:12&quot;);</span><br></pre></td></tr></table></figure><p><strong>3.执行查询语句得到结果</strong></p><p><code>select * from student order by create_time;</code></p><p><img src="https://file.ajungle.cn/img/20221125235150.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> create_time limit <span class="number">0</span>,<span class="number">2</span>; </span><br><span class="line">预期：          </span><br><span class="line">STU000001</span><br><span class="line">STU000002</span><br><span class="line">结果：          </span><br><span class="line">STU000001</span><br><span class="line">STU000002</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> create_time limit <span class="number">2</span>,<span class="number">2</span>;</span><br><span class="line">预期：          </span><br><span class="line">STU000003</span><br><span class="line">STU000004</span><br><span class="line">结果：</span><br><span class="line">STU000003</span><br><span class="line">STU000004</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> create_time limit <span class="number">4</span>,<span class="number">2</span>;</span><br><span class="line">预期：</span><br><span class="line">STU000005</span><br><span class="line">STU000007</span><br><span class="line">结果：不符合预期</span><br><span class="line">STU000005</span><br><span class="line">STU000008</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> create_time limit <span class="number">6</span>,<span class="number">2</span>;</span><br><span class="line">预期：</span><br><span class="line">STU000008</span><br><span class="line">STU000006</span><br><span class="line">结果：</span><br><span class="line">STU000008</span><br><span class="line">STU000006</span><br></pre></td></tr></table></figure><blockquote><p>​可以看到在执行limit 4，2这条语句时，查询的结果不符合预期</p></blockquote><h2 id="产生问题的原因"><a href="#产生问题的原因" class="headerlink" title="产生问题的原因"></a>产生问题的原因</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/limit-optimization.html">《MySQL5.7官方文档-8.2.1.17 LIMIT Query Optimization》</a>：If an index is not used for <code>ORDER BY</code> but a <code>LIMIT</code> clause is also present, the optimizer may be able to avoid using a merge file and sort the rows in memory using an in-memory <code>filesort</code> operation. </p><p>当<code>order by</code>对一个非索引列使用时，还使用了limit语句，优化器会使用内存对行排序</p><p><a href="https://www.quora.com/In-MySQL-does-the-Order-By-clause-force-the-sorting-of-rows-on-a-disk-or-in-the-memory">《Quota-Sachin Khanna》</a>：MySQL has multiple <code>filesort</code> algorithms for sorting and retrieving results.  The original algorithm uses only the ORDER BY columns. The modified  algorithm uses not just the ORDER BY columns, but all columns referenced by the query. There is also an algorithm for small result sets that  sorts in memory using the sort buffer as a <code>priority queue</code> without a  merge file.</p><p><code>filesort</code>的<code>priority queue</code>主要使用了堆排序，而堆排序属于不稳定的排序算法，造成了结果的不确定性</p><h2 id="如何解决问题"><a href="#如何解决问题" class="headerlink" title="如何解决问题"></a>如何解决问题</h2><p>解决<code>order by</code>的二义性，增加一个唯一字段，如下：</p><p><code>select * from student order by create_time,id limit 4,2;</code></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="MySQL5-7字符编码修改"><a href="#MySQL5-7字符编码修改" class="headerlink" title="MySQL5.7字符编码修改"></a>MySQL5.7字符编码修改</h3><p>Windows的MYSQL5.7环境</p><p>修改字符编码：</p><p>在目录<code>C:\ProgramData\MySQL\MySQL Server 5.7\my.ini</code>最后增加:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"><span class="keyword">default</span>-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line"><span class="keyword">default</span>-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><p>重启本地MYSQL（Windows10可以通过任务管理器，最右边服务下面有MYSQL57可以鼠标控制重启）</p><p>查询字符环境(<code>SHOW VARIABLES LIKE &#39;character%&#39;;</code>)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">character_set_clientutf8mb4</span><br><span class="line">character_set_connectionutf8mb4</span><br><span class="line">character_set_databaselatin1</span><br><span class="line">character_set_filesystembinary</span><br><span class="line">character_set_results</span><br><span class="line">character_set_serverutf8</span><br><span class="line">character_set_systemutf8</span><br><span class="line">character_sets_dirC:\Program Files\MySQL\MySQL Server 5.7\share\charsets\</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">分析当使用limit和order by在一个非唯一字段上时，结果有时不符合预期问题。</summary>
    
    
    
    <category term="数据库" scheme="https://ajungle.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://ajungle.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>记一次成都学车经历</title>
    <link href="https://ajungle.cn/post/ca641055.html"/>
    <id>https://ajungle.cn/post/ca641055.html</id>
    <published>2021-05-16T13:30:00.000Z</published>
    <updated>2022-07-24T02:29:19.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><p>开始时间:<code>2020年10月15日</code></p><p>结束时间:<code>2020年12月14日</code></p><p>总用时:<code>两个月</code></p><h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><p>报名费:<code>2240</code></p><p>科目一</p><ul><li>考试时间:<code>10月20日</code></li><li>考试费用:<code>100</code>元</li><li>备考时间:<code>1</code>天</li></ul><p>科目二</p><ul><li>考试时间:<code>12月04日</code></li><li>考试费用:<code>260</code>元+<code>360</code>元(考试模拟费)</li><li>备考时间:<ul><li>每次练习<code>1</code>个小时</li><li>具体时间如下:<code>10-31 16:00</code>、<code>11-03 10:00</code>、<code>11-05 11:00</code>、<code>11-07 13:00</code>、<code>11-10 18:00</code>、<code>11-12 15:00</code>、<code>11-14 15:00</code>、<code>11-17 11:00</code>、<code>11-19 16:00</code>、<code>11-24 10:00</code>、<code>11-28 10:00</code>、<code>11-30 9:00</code>、<code>11-03 10:00</code>、<code>12-01 12:00</code></li><li>总次数:<code>14</code>次</li></ul></li></ul><p>科目三</p><ul><li>考试时间:<code>12月14日</code></li><li>考试费用:<code>200</code>元+<code>360</code>元(考试模拟费)+<code>10</code>元(驾驶证工本费)</li><li>备考时间:<ul><li>每次练习<code>1</code>个小时</li><li>具体时间如下:<code>12-07 16:00</code>、<code>12-09 18:40</code>、<code>12-11 11:00</code>、<code>12-12 19:00</code></li><li>总次数:<code>4</code>次</li></ul></li></ul><blockquote><p>科目三分为路考和文考,科目三的文考就是类似科目一的上机考试,知识题目较少且多为多选题</p></blockquote><p>总费用:</p><p>2240   +   100   +   260   +   360   +   200   +   360   +   10 &#x3D; <code>3530</code>元</p><h1 id="通关秘诀"><a href="#通关秘诀" class="headerlink" title="通关秘诀"></a>通关秘诀</h1><p><em>方法仅供参考</em></p><h2 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a>科目一</h2><p>科目一考前一天开始刷题,一度十分焦虑</p><blockquote><p>直到下午1点25分,刚做了300多道题目,还错了177道题,错的比对的都多</p></blockquote><p>在19日这一天,也就是考前这一天,我彻夜难眠,因为我别说做模拟试卷了,连题目都还没有刷完,后面我改变策略.</p><p>按照以下步骤:</p><ul><li><p>做精题</p><ul><li>这里我是通过下载了<code>驾考宝典</code>APP(垃圾广告多,但是挺好用),里面的题目虽然很多,但是不适用于我这个临时突击的,发现里面有个”精选500道”这样的栏目,于是我选择先给这个先突突了.</li></ul></li><li><p>做总结归纳</p><ul><li>在刷题时,我会对做错的题目,去看分析和网友的总结回答,将自己认为重要的记录在纸上(后面科三文考也用上了)</li></ul></li><li><p>刷错题(不多说)</p></li><li><p>多余时间刷本地区特有题目</p><ul><li>当然是尽量多刷题,给分类类别题目少的先刷了</li></ul></li></ul><p>最后,我那天凌晨三点睡,总共刷了900多道题目,做了两次模拟考试,一次95,一次80多,仓皇上阵</p><p>结果:考试<code>98</code>分</p><h2 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h2><p>科目二我的考场是<code>新都正益</code>,驾校早上开车送过去的,没有送回来</p><p>考试的顺序是:<code>坡道定点停车</code>&gt;<code>直角转弯</code>&gt;<code>侧方位停车</code>&gt;<code>倒车入库</code>&gt;<code>S弯</code>(大概吧,记忆模糊了<del>看卫星地图</del>)</p><p><strong>科目二应该是练习时间花费最长的。</strong></p><p>科目二在考试时,第一次先是坡道定点停车扣分,未打转向灯扣分,停车压实线GG.第二次满分通过,有惊无险</p><h2 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h2><h3 id="路考"><a href="#路考" class="headerlink" title="路考"></a>路考</h3><p>练习时间最少,就练习了3到4次,很多东西都是模拟考时那个教练交给我的,模拟教练叫我们尽量记住线路,路程那么远,谁能记住？</p><p>考试时,同车4个考生,我排第三个,前两个都没有通过,我运气好一次通过了</p><h3 id="文考"><a href="#文考" class="headerlink" title="文考"></a>文考</h3><p>貌似只刷了400多道题,上机考试前还比较慌,一看题目,都是些常识题,so easy</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>必做”精简题”,再做一般题(狂刷完事)</li><li>心态要稳,不要被第一次失误,而影响到第二次考试</li><li>必须要参加”模拟考试”,虽然要多加钱</li></ul>]]></content>
    
    
    <summary type="html">记录一下花费 两个月 + 3500元 在成都学车的经历</summary>
    
    
    
    <category term="日记" scheme="https://ajungle.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://ajungle.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JDK动态代理实现Redis降级</title>
    <link href="https://ajungle.cn/post/a4854be7.html"/>
    <id>https://ajungle.cn/post/a4854be7.html</id>
    <published>2021-03-24T13:05:34.000Z</published>
    <updated>2022-12-22T13:11:12.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>防止<code>Redis</code>服务不可用导致服务不可用，保证业务正常流程，在<code>Redis</code>服务崩掉后，走数据库进行加锁解锁操作，需要尽量不修改原有<code>Redis</code>代码</p><p>原有redis示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OldRedisService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">set</span><span class="params">(String key, <span class="type">long</span> expireTime)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入redis方法内部&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key,<span class="number">1</span>,expireTime, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK动态代理实现"><a href="#JDK动态代理实现" class="headerlink" title="JDK动态代理实现"></a>JDK动态代理实现</h2><h3 id="增加A接口"><a href="#增加A接口" class="headerlink" title="增加A接口"></a>增加A接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisServiceI</span> &#123;</span><br><span class="line">   Boolean <span class="title function_">set</span><span class="params">(String key,<span class="type">long</span> expireTime)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原有redis类实现A"><a href="#原有redis类实现A" class="headerlink" title="原有redis类实现A"></a>原有redis类实现A</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OldRedisService</span> <span class="keyword">implements</span> <span class="title class_">RedisServiceI</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">set</span><span class="params">(String key, <span class="type">long</span> expireTime)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入redis方法内部&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key,<span class="number">1</span>,expireTime, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加MySQL加锁类实现A接口"><a href="#增加MySQL加锁类实现A接口" class="headerlink" title="增加MySQL加锁类实现A接口"></a>增加MySQL加锁类实现A接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseService</span> <span class="keyword">implements</span> <span class="title class_">RedisServiceI</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TCacheInfoMapper tCacheInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">set</span><span class="params">(String key, <span class="type">long</span> expireTime)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入database内部&quot;</span>);</span><br><span class="line">        <span class="type">TCacheInfo</span> <span class="variable">tCacheInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCacheInfo</span>();</span><br><span class="line">        tCacheInfo.setId(<span class="number">1515155L</span>);</span><br><span class="line">        tCacheInfo.setCreateTime(LocalDateTime.now());</span><br><span class="line">        tCacheInfo.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        tCacheInfo.setCacheKey(key);</span><br><span class="line">        tCacheInfo.setCacheValue(key);</span><br><span class="line">        tCacheInfo.setExpireTime(LocalDateTime.now());</span><br><span class="line">        tCacheInfo.setVersion(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> tCacheInfoMapper.insert(tCacheInfo) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对原有类进行代理"><a href="#对原有类进行代理" class="headerlink" title="对原有类进行代理"></a>对原有类进行代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalConfiguration</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> RedisServiceI &amp;&amp; <span class="string">&quot;oldRedisService&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            bean = getProxyBean(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">getProxyBean</span><span class="params">(Object bean)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  Proxy</span><br><span class="line">                .newProxyInstance(</span><br><span class="line">                        <span class="built_in">this</span>.getClass().getClassLoader(),</span><br><span class="line">                        bean.getClass().getInterfaces(),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">DynamicProxyHandler</span>(bean)</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object redisBean;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxyHandler</span><span class="params">(Object redisBean)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisBean = redisBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;代理开始执行:&quot;</span>+method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用原有方法</span></span><br><span class="line">            obj = method.invoke(redisBean, args);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e.getTargetException() <span class="keyword">instanceof</span> BussinessException)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BussinessException</span>(ErrorCode.CA000001,<span class="string">&quot;自定义的异常,需要抛出让全局异常处理&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//执行数据库加锁类的方法</span></span><br><span class="line">            <span class="type">RedisServiceI</span> <span class="variable">bean</span> <span class="operator">=</span> (RedisServiceI) SpringContextUtil.getContext().getBean(<span class="string">&quot;databaseService&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(bean, args);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;代理结束执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisServiceI redisServiceI;</span><br></pre></td></tr></table></figure><p>因为上面<code>OldRedisService</code>类使用了<code>@Primary</code>注解，所以会优先被注入到接口中</p><h2 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h2><ul><li>上面的方式有个缺点，这样修改后，原来的<code>OldRedisService</code>类就不能被注入了，因为已经被代理了。可以优化一下，不代理原有的<code>OldRedisService</code>类，而是新写一个类，也实现<code>RedisServiceI</code>,新类所有方法全部调用<code>OldRedisService</code>，且使用<code>@Primary</code>保证被优先注入接口，最后代理这个新写的类即可。</li><li>其实还有一个锁的数据一致性问题，在Redis加锁后，Redis崩了，是无法同步到数据库中的，这个处理比较麻烦，如果对业务要求比较高需要注意一下</li></ul>]]></content>
    
    
    <summary type="html">设计模式之代理模式实现Redis降级</summary>
    
    
    
    <category term="Java" scheme="https://ajungle.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://ajungle.cn/tags/Java/"/>
    
  </entry>
  
</feed>
